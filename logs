-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.8 from alexhappy/Parser.y
-----------------------------------------------------------------------------


terminal "else:" is unused
terminal str is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseTokens -> input                        (0)
	input -> NEWLINE                                   (1)
	input -> statements                                (2)
	statements -> statement                            (3)
	statements -> statement NEWLINE statements         (4)
	statement -> compound_stmt                         (5)
	statement -> simple_stmt                           (6)
	simple_stmt -> assignment                          (7)
	simple_stmt -> "pass"                              (8)
	simple_stmt -> "print" expression                  (9)
	simple_stmt -> return_stmt                         (10)
	simple_stmt -> name "(" ")"                        (11)
	simple_stmt -> name "(" name ")"                   (12)
	simple_stmt -> name "(" name "," name ")"          (13)
	compound_stmt -> function_def                      (14)
	compound_stmt -> if_stmt                           (15)
	compound_stmt -> while_stmt                        (16)
	assignment -> name "=" expression                  (17)
	if_stmt -> "if" expression ":" block               (18)
	while_stmt -> "while" expression ":" block         (19)
	return_stmt -> "return" expression                 (20)
	function_def -> "def" name "(" ")" ":" block       (21)
	function_def -> "def" name "(" name ")" ":" block   (22)
	function_def -> "def" name "(" name "," name ")" ":" block   (23)
	expression -> disjunction                          (24)
	disjunction -> conjunction "or" conjunction        (25)
	disjunction -> conjunction                         (26)
	conjunction -> inversion "and" inversion           (27)
	conjunction -> inversion                           (28)
	inversion -> "not" inversion                       (29)
	inversion -> comparison                            (30)
	comparison -> sum "==" sum                         (31)
	comparison -> sum "<=" sum                         (32)
	comparison -> sum "<" sum                          (33)
	comparison -> sum ">=" sum                         (34)
	comparison -> sum ">" sum                          (35)
	comparison -> sum                                  (36)
	sum -> sum "+" term                                (37)
	sum -> sum "-" term                                (38)
	sum -> term                                        (39)
	term -> term "*" atom                              (40)
	term -> term "/" atom                              (41)
	term -> atom                                       (42)
	atom -> "int(input())"                             (43)
	atom -> "float(input())"                           (44)
	atom -> "input()"                                  (45)
	atom -> name                                       (46)
	atom -> name "(" ")"                               (47)
	atom -> name "(" expression ")"                    (48)
	atom -> name "(" expression "," expression ")"     (49)
	atom -> "True"                                     (50)
	atom -> "False"                                    (51)
	atom -> int                                        (52)
	atom -> float                                      (53)
	block -> NEWLINE INDENT statements DEDENT          (54)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"def"          { Lexer.Def }
	":"            { Lexer.Colon }
	"return"       { Lexer.ReturnStm }
	"while"        { Lexer.While }
	"if"           { Lexer.If }
	"else:"        { Lexer.Else }
	"True"         { Lexer.TTrue }
	"False"        { Lexer.TFalse }
	"+"            { Lexer.Plus }
	"-"            { Lexer.Minus }
	"/"            { Lexer.Div }
	"*"            { Lexer.Mul }
	"=="           { Lexer.Equality }
	"pass"         { Lexer.Pass }
	"print"        { Lexer.Print }
	">"            { Lexer.Greater }
	"<"            { Lexer.Less }
	">="           { Lexer.GreaterEq }
	"<="           { Lexer.LessEq }
	"and"          { Lexer.And }
	"or"           { Lexer.Or }
	"not"          { Lexer.Not }
	"="            { Lexer.Assign }
	"("            { Lexer.OPar }
	")"            { Lexer.CPar }
	","            { Lexer.Comma }
	NEWLINE        { Lexer.Newline }
	INDENT         { Lexer.Indent }
	DEDENT         { Lexer.Dedent }
	str            { Lexer.Str $$ }
	float          { Lexer.MyFloat $$ }
	int            { Lexer.MyInt $$ }
	name           { Lexer.Name $$ }
	"input()"      { Lexer.ReadStr }
	"int(input())" { Lexer.ReadInt }
	"float(input())"{ Lexer.ReadFloat }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseTokens rule  0
	input           rules 1, 2
	statements      rules 3, 4
	statement       rules 5, 6
	simple_stmt     rules 7, 8, 9, 10, 11, 12, 13
	compound_stmt   rules 14, 15, 16
	assignment      rule  17
	if_stmt         rule  18
	while_stmt      rule  19
	return_stmt     rule  20
	function_def    rules 21, 22, 23
	expression      rule  24
	disjunction     rules 25, 26
	conjunction     rules 27, 28
	inversion       rules 29, 30
	comparison      rules 31, 32, 33, 34, 35, 36
	sum             rules 37, 38, 39
	term            rules 40, 41, 42
	atom            rules 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53
	block           rule  54

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	"def"          shift, and enter state 13
	"return"       shift, and enter state 14
	"while"        shift, and enter state 15
	"if"           shift, and enter state 16
	"pass"         shift, and enter state 17
	"print"        shift, and enter state 18
	NEWLINE        shift, and enter state 2
	name           shift, and enter state 19

	input          goto state 3
	statements     goto state 4
	statement      goto state 5
	simple_stmt    goto state 6
	compound_stmt  goto state 7
	assignment     goto state 8
	if_stmt        goto state 9
	while_stmt     goto state 10
	return_stmt    goto state 11
	function_def   goto state 12

State 1


	NEWLINE        shift, and enter state 2


State 2

	input -> NEWLINE .                                  (rule 1)

	%eof           reduce using rule 1


State 3

	%start_parseTokens -> input .                       (rule 0)

	%eof           accept


State 4

	input -> statements .                               (rule 2)

	%eof           reduce using rule 2


State 5

	statements -> statement .                           (rule 3)
	statements -> statement . NEWLINE statements        (rule 4)

	NEWLINE        shift, and enter state 43
	DEDENT         reduce using rule 3
	%eof           reduce using rule 3


State 6

	statement -> simple_stmt .                          (rule 6)

	NEWLINE        reduce using rule 6
	DEDENT         reduce using rule 6
	%eof           reduce using rule 6


State 7

	statement -> compound_stmt .                        (rule 5)

	NEWLINE        reduce using rule 5
	DEDENT         reduce using rule 5
	%eof           reduce using rule 5


State 8

	simple_stmt -> assignment .                         (rule 7)

	NEWLINE        reduce using rule 7
	DEDENT         reduce using rule 7
	%eof           reduce using rule 7


State 9

	compound_stmt -> if_stmt .                          (rule 15)

	NEWLINE        reduce using rule 15
	DEDENT         reduce using rule 15
	%eof           reduce using rule 15


State 10

	compound_stmt -> while_stmt .                       (rule 16)

	NEWLINE        reduce using rule 16
	DEDENT         reduce using rule 16
	%eof           reduce using rule 16


State 11

	simple_stmt -> return_stmt .                        (rule 10)

	NEWLINE        reduce using rule 10
	DEDENT         reduce using rule 10
	%eof           reduce using rule 10


State 12

	compound_stmt -> function_def .                     (rule 14)

	NEWLINE        reduce using rule 14
	DEDENT         reduce using rule 14
	%eof           reduce using rule 14


State 13

	function_def -> "def" . name "(" ")" ":" block      (rule 21)
	function_def -> "def" . name "(" name ")" ":" block    (rule 22)
	function_def -> "def" . name "(" name "," name ")" ":" block    (rule 23)

	name           shift, and enter state 42


State 14

	return_stmt -> "return" . expression                (rule 20)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	"not"          shift, and enter state 32
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	expression     goto state 41
	disjunction    goto state 23
	conjunction    goto state 24
	inversion      goto state 25
	comparison     goto state 26
	sum            goto state 27
	term           goto state 28
	atom           goto state 29

State 15

	while_stmt -> "while" . expression ":" block        (rule 19)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	"not"          shift, and enter state 32
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	expression     goto state 40
	disjunction    goto state 23
	conjunction    goto state 24
	inversion      goto state 25
	comparison     goto state 26
	sum            goto state 27
	term           goto state 28
	atom           goto state 29

State 16

	if_stmt -> "if" . expression ":" block              (rule 18)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	"not"          shift, and enter state 32
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	expression     goto state 39
	disjunction    goto state 23
	conjunction    goto state 24
	inversion      goto state 25
	comparison     goto state 26
	sum            goto state 27
	term           goto state 28
	atom           goto state 29

State 17

	simple_stmt -> "pass" .                             (rule 8)

	NEWLINE        reduce using rule 8
	DEDENT         reduce using rule 8
	%eof           reduce using rule 8


State 18

	simple_stmt -> "print" . expression                 (rule 9)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	"not"          shift, and enter state 32
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	expression     goto state 22
	disjunction    goto state 23
	conjunction    goto state 24
	inversion      goto state 25
	comparison     goto state 26
	sum            goto state 27
	term           goto state 28
	atom           goto state 29

State 19

	simple_stmt -> name . "(" ")"                       (rule 11)
	simple_stmt -> name . "(" name ")"                  (rule 12)
	simple_stmt -> name . "(" name "," name ")"         (rule 13)
	assignment -> name . "=" expression                 (rule 17)

	"="            shift, and enter state 20
	"("            shift, and enter state 21


State 20

	assignment -> name "=" . expression                 (rule 17)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	"not"          shift, and enter state 32
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	expression     goto state 63
	disjunction    goto state 23
	conjunction    goto state 24
	inversion      goto state 25
	comparison     goto state 26
	sum            goto state 27
	term           goto state 28
	atom           goto state 29

State 21

	simple_stmt -> name "(" . ")"                       (rule 11)
	simple_stmt -> name "(" . name ")"                  (rule 12)
	simple_stmt -> name "(" . name "," name ")"         (rule 13)

	")"            shift, and enter state 61
	name           shift, and enter state 62


State 22

	simple_stmt -> "print" expression .                 (rule 9)

	NEWLINE        reduce using rule 9
	DEDENT         reduce using rule 9
	%eof           reduce using rule 9


State 23

	expression -> disjunction .                         (rule 24)

	":"            reduce using rule 24
	")"            reduce using rule 24
	","            reduce using rule 24
	NEWLINE        reduce using rule 24
	DEDENT         reduce using rule 24
	%eof           reduce using rule 24


State 24

	disjunction -> conjunction . "or" conjunction       (rule 25)
	disjunction -> conjunction .                        (rule 26)

	":"            reduce using rule 26
	"or"           shift, and enter state 60
	")"            reduce using rule 26
	","            reduce using rule 26
	NEWLINE        reduce using rule 26
	DEDENT         reduce using rule 26
	%eof           reduce using rule 26


State 25

	conjunction -> inversion . "and" inversion          (rule 27)
	conjunction -> inversion .                          (rule 28)

	":"            reduce using rule 28
	"and"          shift, and enter state 59
	"or"           reduce using rule 28
	")"            reduce using rule 28
	","            reduce using rule 28
	NEWLINE        reduce using rule 28
	DEDENT         reduce using rule 28
	%eof           reduce using rule 28


State 26

	inversion -> comparison .                           (rule 30)

	":"            reduce using rule 30
	"and"          reduce using rule 30
	"or"           reduce using rule 30
	")"            reduce using rule 30
	","            reduce using rule 30
	NEWLINE        reduce using rule 30
	DEDENT         reduce using rule 30
	%eof           reduce using rule 30


State 27

	comparison -> sum . "==" sum                        (rule 31)
	comparison -> sum . "<=" sum                        (rule 32)
	comparison -> sum . "<" sum                         (rule 33)
	comparison -> sum . ">=" sum                        (rule 34)
	comparison -> sum . ">" sum                         (rule 35)
	comparison -> sum .                                 (rule 36)
	sum -> sum . "+" term                               (rule 37)
	sum -> sum . "-" term                               (rule 38)

	":"            reduce using rule 36
	"+"            shift, and enter state 52
	"-"            shift, and enter state 53
	"=="           shift, and enter state 54
	">"            shift, and enter state 55
	"<"            shift, and enter state 56
	">="           shift, and enter state 57
	"<="           shift, and enter state 58
	"and"          reduce using rule 36
	"or"           reduce using rule 36
	")"            reduce using rule 36
	","            reduce using rule 36
	NEWLINE        reduce using rule 36
	DEDENT         reduce using rule 36
	%eof           reduce using rule 36


State 28

	sum -> term .                                       (rule 39)
	term -> term . "*" atom                             (rule 40)
	term -> term . "/" atom                             (rule 41)

	":"            reduce using rule 39
	"+"            reduce using rule 39
	"-"            reduce using rule 39
	"/"            shift, and enter state 50
	"*"            shift, and enter state 51
	"=="           reduce using rule 39
	">"            reduce using rule 39
	"<"            reduce using rule 39
	">="           reduce using rule 39
	"<="           reduce using rule 39
	"and"          reduce using rule 39
	"or"           reduce using rule 39
	")"            reduce using rule 39
	","            reduce using rule 39
	NEWLINE        reduce using rule 39
	DEDENT         reduce using rule 39
	%eof           reduce using rule 39


State 29

	term -> atom .                                      (rule 42)

	":"            reduce using rule 42
	"+"            reduce using rule 42
	"-"            reduce using rule 42
	"/"            reduce using rule 42
	"*"            reduce using rule 42
	"=="           reduce using rule 42
	">"            reduce using rule 42
	"<"            reduce using rule 42
	">="           reduce using rule 42
	"<="           reduce using rule 42
	"and"          reduce using rule 42
	"or"           reduce using rule 42
	")"            reduce using rule 42
	","            reduce using rule 42
	NEWLINE        reduce using rule 42
	DEDENT         reduce using rule 42
	%eof           reduce using rule 42


State 30

	atom -> "True" .                                    (rule 50)

	":"            reduce using rule 50
	"+"            reduce using rule 50
	"-"            reduce using rule 50
	"/"            reduce using rule 50
	"*"            reduce using rule 50
	"=="           reduce using rule 50
	">"            reduce using rule 50
	"<"            reduce using rule 50
	">="           reduce using rule 50
	"<="           reduce using rule 50
	"and"          reduce using rule 50
	"or"           reduce using rule 50
	")"            reduce using rule 50
	","            reduce using rule 50
	NEWLINE        reduce using rule 50
	DEDENT         reduce using rule 50
	%eof           reduce using rule 50


State 31

	atom -> "False" .                                   (rule 51)

	":"            reduce using rule 51
	"+"            reduce using rule 51
	"-"            reduce using rule 51
	"/"            reduce using rule 51
	"*"            reduce using rule 51
	"=="           reduce using rule 51
	">"            reduce using rule 51
	"<"            reduce using rule 51
	">="           reduce using rule 51
	"<="           reduce using rule 51
	"and"          reduce using rule 51
	"or"           reduce using rule 51
	")"            reduce using rule 51
	","            reduce using rule 51
	NEWLINE        reduce using rule 51
	DEDENT         reduce using rule 51
	%eof           reduce using rule 51


State 32

	inversion -> "not" . inversion                      (rule 29)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	"not"          shift, and enter state 32
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	inversion      goto state 49
	comparison     goto state 26
	sum            goto state 27
	term           goto state 28
	atom           goto state 29

State 33

	atom -> float .                                     (rule 53)

	":"            reduce using rule 53
	"+"            reduce using rule 53
	"-"            reduce using rule 53
	"/"            reduce using rule 53
	"*"            reduce using rule 53
	"=="           reduce using rule 53
	">"            reduce using rule 53
	"<"            reduce using rule 53
	">="           reduce using rule 53
	"<="           reduce using rule 53
	"and"          reduce using rule 53
	"or"           reduce using rule 53
	")"            reduce using rule 53
	","            reduce using rule 53
	NEWLINE        reduce using rule 53
	DEDENT         reduce using rule 53
	%eof           reduce using rule 53


State 34

	atom -> int .                                       (rule 52)

	":"            reduce using rule 52
	"+"            reduce using rule 52
	"-"            reduce using rule 52
	"/"            reduce using rule 52
	"*"            reduce using rule 52
	"=="           reduce using rule 52
	">"            reduce using rule 52
	"<"            reduce using rule 52
	">="           reduce using rule 52
	"<="           reduce using rule 52
	"and"          reduce using rule 52
	"or"           reduce using rule 52
	")"            reduce using rule 52
	","            reduce using rule 52
	NEWLINE        reduce using rule 52
	DEDENT         reduce using rule 52
	%eof           reduce using rule 52


State 35

	atom -> name .                                      (rule 46)
	atom -> name . "(" ")"                              (rule 47)
	atom -> name . "(" expression ")"                   (rule 48)
	atom -> name . "(" expression "," expression ")"    (rule 49)

	":"            reduce using rule 46
	"+"            reduce using rule 46
	"-"            reduce using rule 46
	"/"            reduce using rule 46
	"*"            reduce using rule 46
	"=="           reduce using rule 46
	">"            reduce using rule 46
	"<"            reduce using rule 46
	">="           reduce using rule 46
	"<="           reduce using rule 46
	"and"          reduce using rule 46
	"or"           reduce using rule 46
	"("            shift, and enter state 48
	")"            reduce using rule 46
	","            reduce using rule 46
	NEWLINE        reduce using rule 46
	DEDENT         reduce using rule 46
	%eof           reduce using rule 46


State 36

	atom -> "input()" .                                 (rule 45)

	":"            reduce using rule 45
	"+"            reduce using rule 45
	"-"            reduce using rule 45
	"/"            reduce using rule 45
	"*"            reduce using rule 45
	"=="           reduce using rule 45
	">"            reduce using rule 45
	"<"            reduce using rule 45
	">="           reduce using rule 45
	"<="           reduce using rule 45
	"and"          reduce using rule 45
	"or"           reduce using rule 45
	")"            reduce using rule 45
	","            reduce using rule 45
	NEWLINE        reduce using rule 45
	DEDENT         reduce using rule 45
	%eof           reduce using rule 45


State 37

	atom -> "int(input())" .                            (rule 43)

	":"            reduce using rule 43
	"+"            reduce using rule 43
	"-"            reduce using rule 43
	"/"            reduce using rule 43
	"*"            reduce using rule 43
	"=="           reduce using rule 43
	">"            reduce using rule 43
	"<"            reduce using rule 43
	">="           reduce using rule 43
	"<="           reduce using rule 43
	"and"          reduce using rule 43
	"or"           reduce using rule 43
	")"            reduce using rule 43
	","            reduce using rule 43
	NEWLINE        reduce using rule 43
	DEDENT         reduce using rule 43
	%eof           reduce using rule 43


State 38

	atom -> "float(input())" .                          (rule 44)

	":"            reduce using rule 44
	"+"            reduce using rule 44
	"-"            reduce using rule 44
	"/"            reduce using rule 44
	"*"            reduce using rule 44
	"=="           reduce using rule 44
	">"            reduce using rule 44
	"<"            reduce using rule 44
	">="           reduce using rule 44
	"<="           reduce using rule 44
	"and"          reduce using rule 44
	"or"           reduce using rule 44
	")"            reduce using rule 44
	","            reduce using rule 44
	NEWLINE        reduce using rule 44
	DEDENT         reduce using rule 44
	%eof           reduce using rule 44


State 39

	if_stmt -> "if" expression . ":" block              (rule 18)

	":"            shift, and enter state 47


State 40

	while_stmt -> "while" expression . ":" block        (rule 19)

	":"            shift, and enter state 46


State 41

	return_stmt -> "return" expression .                (rule 20)

	NEWLINE        reduce using rule 20
	DEDENT         reduce using rule 20
	%eof           reduce using rule 20


State 42

	function_def -> "def" name . "(" ")" ":" block      (rule 21)
	function_def -> "def" name . "(" name ")" ":" block    (rule 22)
	function_def -> "def" name . "(" name "," name ")" ":" block    (rule 23)

	"("            shift, and enter state 45


State 43

	statements -> statement NEWLINE . statements        (rule 4)

	"def"          shift, and enter state 13
	"return"       shift, and enter state 14
	"while"        shift, and enter state 15
	"if"           shift, and enter state 16
	"pass"         shift, and enter state 17
	"print"        shift, and enter state 18
	name           shift, and enter state 19

	statements     goto state 44
	statement      goto state 5
	simple_stmt    goto state 6
	compound_stmt  goto state 7
	assignment     goto state 8
	if_stmt        goto state 9
	while_stmt     goto state 10
	return_stmt    goto state 11
	function_def   goto state 12

State 44

	statements -> statement NEWLINE statements .        (rule 4)

	DEDENT         reduce using rule 4
	%eof           reduce using rule 4


State 45

	function_def -> "def" name "(" . ")" ":" block      (rule 21)
	function_def -> "def" name "(" . name ")" ":" block    (rule 22)
	function_def -> "def" name "(" . name "," name ")" ":" block    (rule 23)

	")"            shift, and enter state 82
	name           shift, and enter state 83


State 46

	while_stmt -> "while" expression ":" . block        (rule 19)

	NEWLINE        shift, and enter state 80

	block          goto state 81

State 47

	if_stmt -> "if" expression ":" . block              (rule 18)

	NEWLINE        shift, and enter state 80

	block          goto state 79

State 48

	atom -> name "(" . ")"                              (rule 47)
	atom -> name "(" . expression ")"                   (rule 48)
	atom -> name "(" . expression "," expression ")"    (rule 49)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	"not"          shift, and enter state 32
	")"            shift, and enter state 78
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	expression     goto state 77
	disjunction    goto state 23
	conjunction    goto state 24
	inversion      goto state 25
	comparison     goto state 26
	sum            goto state 27
	term           goto state 28
	atom           goto state 29

State 49

	inversion -> "not" inversion .                      (rule 29)

	":"            reduce using rule 29
	"and"          reduce using rule 29
	"or"           reduce using rule 29
	")"            reduce using rule 29
	","            reduce using rule 29
	NEWLINE        reduce using rule 29
	DEDENT         reduce using rule 29
	%eof           reduce using rule 29


State 50

	term -> term "/" . atom                             (rule 41)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	atom           goto state 76

State 51

	term -> term "*" . atom                             (rule 40)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	atom           goto state 75

State 52

	sum -> sum "+" . term                               (rule 37)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	term           goto state 74
	atom           goto state 29

State 53

	sum -> sum "-" . term                               (rule 38)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	term           goto state 73
	atom           goto state 29

State 54

	comparison -> sum "==" . sum                        (rule 31)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	sum            goto state 72
	term           goto state 28
	atom           goto state 29

State 55

	comparison -> sum ">" . sum                         (rule 35)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	sum            goto state 71
	term           goto state 28
	atom           goto state 29

State 56

	comparison -> sum "<" . sum                         (rule 33)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	sum            goto state 70
	term           goto state 28
	atom           goto state 29

State 57

	comparison -> sum ">=" . sum                        (rule 34)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	sum            goto state 69
	term           goto state 28
	atom           goto state 29

State 58

	comparison -> sum "<=" . sum                        (rule 32)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	sum            goto state 68
	term           goto state 28
	atom           goto state 29

State 59

	conjunction -> inversion "and" . inversion          (rule 27)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	"not"          shift, and enter state 32
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	inversion      goto state 67
	comparison     goto state 26
	sum            goto state 27
	term           goto state 28
	atom           goto state 29

State 60

	disjunction -> conjunction "or" . conjunction       (rule 25)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	"not"          shift, and enter state 32
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	conjunction    goto state 66
	inversion      goto state 25
	comparison     goto state 26
	sum            goto state 27
	term           goto state 28
	atom           goto state 29

State 61

	simple_stmt -> name "(" ")" .                       (rule 11)

	NEWLINE        reduce using rule 11
	DEDENT         reduce using rule 11
	%eof           reduce using rule 11


State 62

	simple_stmt -> name "(" name . ")"                  (rule 12)
	simple_stmt -> name "(" name . "," name ")"         (rule 13)

	")"            shift, and enter state 64
	","            shift, and enter state 65


State 63

	assignment -> name "=" expression .                 (rule 17)

	NEWLINE        reduce using rule 17
	DEDENT         reduce using rule 17
	%eof           reduce using rule 17


State 64

	simple_stmt -> name "(" name ")" .                  (rule 12)

	NEWLINE        reduce using rule 12
	DEDENT         reduce using rule 12
	%eof           reduce using rule 12


State 65

	simple_stmt -> name "(" name "," . name ")"         (rule 13)

	name           shift, and enter state 90


State 66

	disjunction -> conjunction "or" conjunction .       (rule 25)

	":"            reduce using rule 25
	")"            reduce using rule 25
	","            reduce using rule 25
	NEWLINE        reduce using rule 25
	DEDENT         reduce using rule 25
	%eof           reduce using rule 25


State 67

	conjunction -> inversion "and" inversion .          (rule 27)

	":"            reduce using rule 27
	"or"           reduce using rule 27
	")"            reduce using rule 27
	","            reduce using rule 27
	NEWLINE        reduce using rule 27
	DEDENT         reduce using rule 27
	%eof           reduce using rule 27


State 68

	comparison -> sum "<=" sum .                        (rule 32)
	sum -> sum . "+" term                               (rule 37)
	sum -> sum . "-" term                               (rule 38)

	":"            reduce using rule 32
	"+"            shift, and enter state 52
	"-"            shift, and enter state 53
	"and"          reduce using rule 32
	"or"           reduce using rule 32
	")"            reduce using rule 32
	","            reduce using rule 32
	NEWLINE        reduce using rule 32
	DEDENT         reduce using rule 32
	%eof           reduce using rule 32


State 69

	comparison -> sum ">=" sum .                        (rule 34)
	sum -> sum . "+" term                               (rule 37)
	sum -> sum . "-" term                               (rule 38)

	":"            reduce using rule 34
	"+"            shift, and enter state 52
	"-"            shift, and enter state 53
	"and"          reduce using rule 34
	"or"           reduce using rule 34
	")"            reduce using rule 34
	","            reduce using rule 34
	NEWLINE        reduce using rule 34
	DEDENT         reduce using rule 34
	%eof           reduce using rule 34


State 70

	comparison -> sum "<" sum .                         (rule 33)
	sum -> sum . "+" term                               (rule 37)
	sum -> sum . "-" term                               (rule 38)

	":"            reduce using rule 33
	"+"            shift, and enter state 52
	"-"            shift, and enter state 53
	"and"          reduce using rule 33
	"or"           reduce using rule 33
	")"            reduce using rule 33
	","            reduce using rule 33
	NEWLINE        reduce using rule 33
	DEDENT         reduce using rule 33
	%eof           reduce using rule 33


State 71

	comparison -> sum ">" sum .                         (rule 35)
	sum -> sum . "+" term                               (rule 37)
	sum -> sum . "-" term                               (rule 38)

	":"            reduce using rule 35
	"+"            shift, and enter state 52
	"-"            shift, and enter state 53
	"and"          reduce using rule 35
	"or"           reduce using rule 35
	")"            reduce using rule 35
	","            reduce using rule 35
	NEWLINE        reduce using rule 35
	DEDENT         reduce using rule 35
	%eof           reduce using rule 35


State 72

	comparison -> sum "==" sum .                        (rule 31)
	sum -> sum . "+" term                               (rule 37)
	sum -> sum . "-" term                               (rule 38)

	":"            reduce using rule 31
	"+"            shift, and enter state 52
	"-"            shift, and enter state 53
	"and"          reduce using rule 31
	"or"           reduce using rule 31
	")"            reduce using rule 31
	","            reduce using rule 31
	NEWLINE        reduce using rule 31
	DEDENT         reduce using rule 31
	%eof           reduce using rule 31


State 73

	sum -> sum "-" term .                               (rule 38)
	term -> term . "*" atom                             (rule 40)
	term -> term . "/" atom                             (rule 41)

	":"            reduce using rule 38
	"+"            reduce using rule 38
	"-"            reduce using rule 38
	"/"            shift, and enter state 50
	"*"            shift, and enter state 51
	"=="           reduce using rule 38
	">"            reduce using rule 38
	"<"            reduce using rule 38
	">="           reduce using rule 38
	"<="           reduce using rule 38
	"and"          reduce using rule 38
	"or"           reduce using rule 38
	")"            reduce using rule 38
	","            reduce using rule 38
	NEWLINE        reduce using rule 38
	DEDENT         reduce using rule 38
	%eof           reduce using rule 38


State 74

	sum -> sum "+" term .                               (rule 37)
	term -> term . "*" atom                             (rule 40)
	term -> term . "/" atom                             (rule 41)

	":"            reduce using rule 37
	"+"            reduce using rule 37
	"-"            reduce using rule 37
	"/"            shift, and enter state 50
	"*"            shift, and enter state 51
	"=="           reduce using rule 37
	">"            reduce using rule 37
	"<"            reduce using rule 37
	">="           reduce using rule 37
	"<="           reduce using rule 37
	"and"          reduce using rule 37
	"or"           reduce using rule 37
	")"            reduce using rule 37
	","            reduce using rule 37
	NEWLINE        reduce using rule 37
	DEDENT         reduce using rule 37
	%eof           reduce using rule 37


State 75

	term -> term "*" atom .                             (rule 40)

	":"            reduce using rule 40
	"+"            reduce using rule 40
	"-"            reduce using rule 40
	"/"            reduce using rule 40
	"*"            reduce using rule 40
	"=="           reduce using rule 40
	">"            reduce using rule 40
	"<"            reduce using rule 40
	">="           reduce using rule 40
	"<="           reduce using rule 40
	"and"          reduce using rule 40
	"or"           reduce using rule 40
	")"            reduce using rule 40
	","            reduce using rule 40
	NEWLINE        reduce using rule 40
	DEDENT         reduce using rule 40
	%eof           reduce using rule 40


State 76

	term -> term "/" atom .                             (rule 41)

	":"            reduce using rule 41
	"+"            reduce using rule 41
	"-"            reduce using rule 41
	"/"            reduce using rule 41
	"*"            reduce using rule 41
	"=="           reduce using rule 41
	">"            reduce using rule 41
	"<"            reduce using rule 41
	">="           reduce using rule 41
	"<="           reduce using rule 41
	"and"          reduce using rule 41
	"or"           reduce using rule 41
	")"            reduce using rule 41
	","            reduce using rule 41
	NEWLINE        reduce using rule 41
	DEDENT         reduce using rule 41
	%eof           reduce using rule 41


State 77

	atom -> name "(" expression . ")"                   (rule 48)
	atom -> name "(" expression . "," expression ")"    (rule 49)

	")"            shift, and enter state 88
	","            shift, and enter state 89


State 78

	atom -> name "(" ")" .                              (rule 47)

	":"            reduce using rule 47
	"+"            reduce using rule 47
	"-"            reduce using rule 47
	"/"            reduce using rule 47
	"*"            reduce using rule 47
	"=="           reduce using rule 47
	">"            reduce using rule 47
	"<"            reduce using rule 47
	">="           reduce using rule 47
	"<="           reduce using rule 47
	"and"          reduce using rule 47
	"or"           reduce using rule 47
	")"            reduce using rule 47
	","            reduce using rule 47
	NEWLINE        reduce using rule 47
	DEDENT         reduce using rule 47
	%eof           reduce using rule 47


State 79

	if_stmt -> "if" expression ":" block .              (rule 18)

	NEWLINE        reduce using rule 18
	DEDENT         reduce using rule 18
	%eof           reduce using rule 18


State 80

	block -> NEWLINE . INDENT statements DEDENT         (rule 54)

	INDENT         shift, and enter state 87


State 81

	while_stmt -> "while" expression ":" block .        (rule 19)

	NEWLINE        reduce using rule 19
	DEDENT         reduce using rule 19
	%eof           reduce using rule 19


State 82

	function_def -> "def" name "(" ")" . ":" block      (rule 21)

	":"            shift, and enter state 86


State 83

	function_def -> "def" name "(" name . ")" ":" block    (rule 22)
	function_def -> "def" name "(" name . "," name ")" ":" block    (rule 23)

	")"            shift, and enter state 84
	","            shift, and enter state 85


State 84

	function_def -> "def" name "(" name ")" . ":" block    (rule 22)

	":"            shift, and enter state 96


State 85

	function_def -> "def" name "(" name "," . name ")" ":" block    (rule 23)

	name           shift, and enter state 95


State 86

	function_def -> "def" name "(" ")" ":" . block      (rule 21)

	NEWLINE        shift, and enter state 80

	block          goto state 94

State 87

	block -> NEWLINE INDENT . statements DEDENT         (rule 54)

	"def"          shift, and enter state 13
	"return"       shift, and enter state 14
	"while"        shift, and enter state 15
	"if"           shift, and enter state 16
	"pass"         shift, and enter state 17
	"print"        shift, and enter state 18
	name           shift, and enter state 19

	statements     goto state 93
	statement      goto state 5
	simple_stmt    goto state 6
	compound_stmt  goto state 7
	assignment     goto state 8
	if_stmt        goto state 9
	while_stmt     goto state 10
	return_stmt    goto state 11
	function_def   goto state 12

State 88

	atom -> name "(" expression ")" .                   (rule 48)

	":"            reduce using rule 48
	"+"            reduce using rule 48
	"-"            reduce using rule 48
	"/"            reduce using rule 48
	"*"            reduce using rule 48
	"=="           reduce using rule 48
	">"            reduce using rule 48
	"<"            reduce using rule 48
	">="           reduce using rule 48
	"<="           reduce using rule 48
	"and"          reduce using rule 48
	"or"           reduce using rule 48
	")"            reduce using rule 48
	","            reduce using rule 48
	NEWLINE        reduce using rule 48
	DEDENT         reduce using rule 48
	%eof           reduce using rule 48


State 89

	atom -> name "(" expression "," . expression ")"    (rule 49)

	"True"         shift, and enter state 30
	"False"        shift, and enter state 31
	"not"          shift, and enter state 32
	float          shift, and enter state 33
	int            shift, and enter state 34
	name           shift, and enter state 35
	"input()"      shift, and enter state 36
	"int(input())" shift, and enter state 37
	"float(input())"shift, and enter state 38

	expression     goto state 92
	disjunction    goto state 23
	conjunction    goto state 24
	inversion      goto state 25
	comparison     goto state 26
	sum            goto state 27
	term           goto state 28
	atom           goto state 29

State 90

	simple_stmt -> name "(" name "," name . ")"         (rule 13)

	")"            shift, and enter state 91


State 91

	simple_stmt -> name "(" name "," name ")" .         (rule 13)

	NEWLINE        reduce using rule 13
	DEDENT         reduce using rule 13
	%eof           reduce using rule 13


State 92

	atom -> name "(" expression "," expression . ")"    (rule 49)

	")"            shift, and enter state 100


State 93

	block -> NEWLINE INDENT statements . DEDENT         (rule 54)

	DEDENT         shift, and enter state 99


State 94

	function_def -> "def" name "(" ")" ":" block .      (rule 21)

	NEWLINE        reduce using rule 21
	DEDENT         reduce using rule 21
	%eof           reduce using rule 21


State 95

	function_def -> "def" name "(" name "," name . ")" ":" block    (rule 23)

	")"            shift, and enter state 98


State 96

	function_def -> "def" name "(" name ")" ":" . block    (rule 22)

	NEWLINE        shift, and enter state 80

	block          goto state 97

State 97

	function_def -> "def" name "(" name ")" ":" block .    (rule 22)

	NEWLINE        reduce using rule 22
	DEDENT         reduce using rule 22
	%eof           reduce using rule 22


State 98

	function_def -> "def" name "(" name "," name ")" . ":" block    (rule 23)

	":"            shift, and enter state 101


State 99

	block -> NEWLINE INDENT statements DEDENT .         (rule 54)

	NEWLINE        reduce using rule 54
	DEDENT         reduce using rule 54
	%eof           reduce using rule 54


State 100

	atom -> name "(" expression "," expression ")" .    (rule 49)

	":"            reduce using rule 49
	"+"            reduce using rule 49
	"-"            reduce using rule 49
	"/"            reduce using rule 49
	"*"            reduce using rule 49
	"=="           reduce using rule 49
	">"            reduce using rule 49
	"<"            reduce using rule 49
	">="           reduce using rule 49
	"<="           reduce using rule 49
	"and"          reduce using rule 49
	"or"           reduce using rule 49
	")"            reduce using rule 49
	","            reduce using rule 49
	NEWLINE        reduce using rule 49
	DEDENT         reduce using rule 49
	%eof           reduce using rule 49


State 101

	function_def -> "def" name "(" name "," name ")" ":" . block    (rule 23)

	NEWLINE        shift, and enter state 80

	block          goto state 102

State 102

	function_def -> "def" name "(" name "," name ")" ":" block .    (rule 23)

	NEWLINE        reduce using rule 23
	DEDENT         reduce using rule 23
	%eof           reduce using rule 23


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 55
Number of terminals: 36
Number of non-terminals: 20
Number of states: 103
